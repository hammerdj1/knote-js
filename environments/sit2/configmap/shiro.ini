[main]
securityManager.sessionManager.deleteInvalidSessions = false
securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled = false

myRealm = com.inmarsat.iice.connectors.realm.IdentityRealm

# This is the URL of the Auth Server that we will trust tokens from
myRealm.issueUrl = https://login-stage.inmarsat.com/oauth2/ausm8g8wZzBpBdp0N0x5

#The base URL for the appropriate Identity/RBAC business service:
myRealm.identityManagementSrvUrl = https://management-access-user-identity-sit2.integration-nonprod.inmarsat.global

#This custom permission resolver allows for the "any" checks using the ? format
rolePermissionResolver = com.inmarsat.iice.connectors.realm.IdentityPermissionResolver
myRealm.permissionResolver = $rolePermissionResolver

#The cache manager reduces calls to the business service
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
myRealm.authenticationCachingEnabled = true
myRealm.authorizationCachingEnabled = true

securityManager.realm = $myRealm
securityManager.cacheManager = $cacheManager

#Ant style paths, and associated permission to check
#This is used for coarse grained permission checks.
[urls]
#verb@path = resource:action:scopetype:scopevalue

#example
# put@/api/order/{id} = Order:Read:Site:222

# Catch all rule to deny all access, remove to allow access to unprotected routes
*@/** = auth